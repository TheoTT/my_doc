"去除VI一致性,必须
set nocompatible
"必须             
filetype off                  
 
"设置Vundle的运行路径
set rtp+=~/.vim/bundle/Vundle.vim
"设置插件的安装路径,vundle插件起始标志
call vundle#begin('~/.vim/bundle')
 
"让vundle管理插件版本
Plugin 'VundleVim/Vundle.vim'

"添加nerdtree插件
Plugin 'scrooloose/nerdtree'

"使用tab键切换窗口与目录树
Plugin 'jistr/vim-nerdtree-tabs'

"添加jedi-vim代码补全插件（没有YouCompleteMe好用）
"Plugin 'davidhalter/jedi-vim'

"添加YouCompleteMe自动补全插件
Plugin 'Valloric/YouCompleteMe'

"python语法检测
Plugin 'scrooloose/syntastic'

"添加PEP8代码风格检查
Plugin 'nvie/vim-flake8'

"配色方案
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'

"代码折叠插件
Plugin 'tmhedberg/SimpylFold'

"自动缩进
Plugin 'vim-scripts/indentpython.vim'

"在vim的normal模式下搜索文件
Plugin 'kien/ctrlp.vim'

"Powerline状态栏
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

"注释 commenter: \cc \cu
Plugin 'scrooloose/nerdcommenter'

" Emmet提供了类似Jade语法的编写HTML的方式,例如输入div>p#foo$*3>a，按下快捷键<c-y>自动生成html
Plugin 'mattn/emmet-vim'

" CSS语法高亮
Plugin 'hail2u/vim-css3-syntax'   

" LESS支持
Plugin 'groenewege/vim-less'

" delimitMate来自动补全后大括号
Plugin 'Raimondi/delimitMate'

" JavaScript 语法高亮
Plugin 'pangloss/vim-javascript'

" 明显地显示缩进范围js
Plugin 'nathanaelkane/vim-indent-guides'

" 提供强大的JavaScript omnifunc
Plugin 'marijnh/tern_for_vim'

" 自动操作括号
Plugin 'tpope/vim-surround'

"你的所有插件需要在下面这行之前
call vundle#end()


"设置分割窗口
set splitbelow
set splitright

"设置窗口移动快捷键
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" NERDTree插件的配置信息
""将F2设置为开关NERDTree的快捷键
map <f2> :NERDTreeToggle<cr>
""修改树的显示图标
"let g:NERDTreeDirArrowExpandable = '+'
"let g:NERDTreeDirArrowCollapsible = '-'
""窗口位置
let g:NERDTreeWinPos='left'
""窗口尺寸
let g:NERDTreewinSize=31
""窗口是否显示行号
"let g:NERDTreeShowLineNumbers=1
""不显示隐藏文件
let g:NERDTreeShowHidden=0
"隐藏目录树种的.pyc文件
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

"youcompleteme  默认tab  s-tab 和自动补全冲突
""let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
"let g:ycm_key_list_previous_completion = ['<Up>']
"关闭加载.ycm_extra_conf.py提示
let g:ycm_confirm_extra_conf=0 
" 开启 YCM 基于标签引擎
"let g:ycm_collect_identifiers_from_tags_files=1 
" 从第2个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=2 
" 禁止缓存匹配项,每次都重新生成匹配项
"let g:ycm_cache_omnifunc=0  
" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1
"force recomile with syntastic
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>    
"nnoremap <leader>lo :lopen<CR> "open locationlist
"nnoremap <leader>lc :lclose<CR>    "close locationlist
"inoremap <leader><leader> <C-x><C-o>
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0

"goto,YCM提供的跳跃功能采用了vim的jumplist，往前跳和往后跳的快捷键为Ctrl+O以及Ctrl+I。
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

" 配置CSS自动补全触发器
let g:ycm_semantic_triggers = {
    \   'css': [ 're!^\s{4}', 're!:\s+'],
    \   'html': [ '</' ],
    \ }

" 支持高亮写在JavaScript中的CSS和HTML
let javascript_enable_domhtmlcss = 1
 
"设置主题颜色，以及设置快捷键F5
if has('gui_running')
  set background=dark
  "colorscheme solarized
  colorscheme evening
else
  colorscheme zenburn
endif
call togglebg#map("<F6>")

"syntastic
"设置error和warning的标志
"let g:syntastic_enable_signs = 1
"let g:syntastic_error_symbol='e'
"let g:syntastic_warning_symbol='w'
"总是打开Location List（相当于QuickFix）窗口，如果你发现syntastic因为与其他插件冲突而经常崩溃，将下面选项置0
"let g:syntastic_always_populate_loc_list = 1
"自动打开Locaton List，默认值为2，表示发现错误时不自动打开，当修正以后没有再发现错误时自动关闭，置1表示自动打开自动关闭，0表示关闭自动打开和自动关闭，3表示自动打开，但不自动关闭
let g:syntastic_auto_loc_list = 1
"修改Locaton List窗口高度
"let g:syntastic_loc_list_height = 3
""打开文件时自动进行检查
"let g:syntastic_check_on_open = 1
"自动跳转到发现的第一个错误或警告处
"let g:syntastic_auto_jump = 1
"设置flake8为默认的python语法检查工具(flake8, pyflakes, pylint)
let g:syntastic_python_checkers = ['flake8']

" 配置js的语法检查工具为eslint
let g:syntastic_javsacript_checkers = ['eslint']

 
"开启代码折叠
set foldmethod=indent
set foldlevel=99
"设置快捷键为空格
nnoremap <space> za
"显示折叠代码的文档字符串
let g:SimpylFold_docstring_preview=1
 
"python代码缩进PEP8风格
au BufNewFile,BufRead *.py,*.pyw set tabstop=4 
au BufNewFile,BufRead *.py,*.pyw set softtabstop=4 
au BufNewFile,BufRead *.py,*.pyw set shiftwidth=4 
au BufNewFile,BufRead *.py,*.pyw set textwidth=79 
au BufNewFile,BufRead *.py,*.pyw set expandtab 
au BufNewFile,BufRead *.py,*.pyw set autoindent 
au BufNewFile,BufRead *.py,*.pyw set fileformat=unix
 
"对其他文件类型设置au命令
"au BufNewFile,BufRead *.js, *.html, *.css set tabstop=2
"au BufNewFile,BufRead *.js, *.html, *.css set softtabstop=2
"au BufNewFile,BufRead *.js, *.html, *.css set shiftwidth=2
"高亮显示行伟不必要的空白字符
highlight Whitespace ctermbg=red guibg=red
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match Whitespace /\s\+$\ \+/
"设置行号显示
set nu

"height ligth cusor (配置光标十字定位)
set bg=dark 
set cursorline 
set cursorcolumn 
set cc=79 "设置一行超过79个字符告警
highlight CursorLine cterm=none ctermbg=236 
highlight CursorColumn cterm=none ctermbg=236

" 设置Emmet快捷键为 Ctrl + /
autocmd filetype *html* imap <c-_> <c-y>/
autocmd filetype *html* map <c-_> <c-y>/




"设置与系统剪切板共享
set clipboard=unnamedplus
 
"设置utf-8编码
set encoding=utf-8
 
let python_highlight_all=1
syntax on

"加载vim自带和插件相应的语法和文件类型相关脚本
filetype plugin indent on
